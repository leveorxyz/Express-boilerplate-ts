name: Unit testing
on: pull_request

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:16.16.0

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: yarn

      - name: Spawn PostgreSQL and run tests
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: yarn test
        # Environment variables used by the test script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          DB_HOST: postgres
          # The default PostgreSQL port
          DB_PORT: 5432
          # The username used to connect to the PostgreSQL service container
          DB_USERNAME: postgres
          # The password used to connect to the PostgreSQL service container
          DB_PASSWORD: postgres
          # The name of the PostgreSQL database
          DB_NAME: postgres
          # DB dialect
          DB_TYPE: postgres
          # DB connection pool size minimum
          DB_CONNECTION_POOL_MIN: 0
          # DB connection pool size maximum
          DB_CONNECTION_POOL_MAX: 5
          # DB connection pool size idle timeout
          DB_CONNECTION_POOL_IDLE: 10000